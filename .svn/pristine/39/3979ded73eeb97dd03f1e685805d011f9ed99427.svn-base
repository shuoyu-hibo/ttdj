package com.web.action.login;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.servlet.ServletException;

import net.sf.json.JSONArray;

import com.service.homepage.HomePageServiceImpl;
import com.service.register.RegisterServiceImpl;
import com.web.action.base.BaseAction;
import com.web.action.base.JsonUtil;

public class LoginAction extends BaseAction {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * 验证注册时,用户名是否已经存在
	 */
	public void checkUserName() throws Exception {
		String userName = request.getParameter("userName");
		RegisterServiceImpl registerServiceImpl = ((RegisterServiceImpl) getApplicationContext()
				.getBean("registerServiceImpl"));
		int count = registerServiceImpl.selectCountByUserName(userName);
		// JSONObject jsonObj=new JSONObject();
		// ArrayList aList = new ArrayList();
		JsonUtil jsUtil = new JsonUtil();
		JSONArray jsAry = new JSONArray();
		if (count >= 1) {
			jsUtil.returnJson(response, "1", jsAry);// 存在相同的用户名
		} else {
			jsUtil.returnJson(response, "0", jsAry);// 不存在相同的用户名
		}
	}


	// Process the HTTP Get request
	public void genCheckImg() throws ServletException, IOException {
		try {
			response.setHeader("Pragma", "No-cache");
			response.setHeader("Cache-Control", "no-cache");
			response.setDateHeader("Expires", 0);
			int width = 60, height = 20;
			BufferedImage image = new BufferedImage(width, height,
					BufferedImage.TYPE_INT_RGB);
			OutputStream os = response.getOutputStream();
			Graphics g = image.getGraphics();
			Random random = new Random();
			g.setColor(getRandColor(200, 250));
			g.fillRect(0, 0, width, height);
			g.setFont(new Font("Arial", Font.PLAIN, 18));
			g.setColor(getRandColor(160, 200));
			for (int i = 0; i < 155; i++) {
				int x = random.nextInt(width);
				int y = random.nextInt(height);
				int xl = random.nextInt(12);
				int yl = random.nextInt(12);
				g.drawLine(x, y, x + xl, y + yl);
			}
			String sRand = "";
			for (int j = 0; j < 4; j++) {
				String rand = String.valueOf(random.nextInt(10));
				sRand += rand;
				g.setColor(new Color(20 + random.nextInt(110), 20 + random
						.nextInt(110), 20 + random.nextInt(110)));
				g.drawString(rand, 13 * j + 6, 16);
			}
			request.getSession().setAttribute("ttdjrand", sRand);
			g.dispose();
			ImageIO.write(image, "JPEG", os);
			os.flush();
			os.close();
			os = null;
			response.flushBuffer();
			// out.clear();
			// out = pageContext.pushBody();
		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
	}

	public Color getRandColor(int fc, int bc) {
		Random random = new Random();
		if (fc > 255)
			fc = 255;
		if (bc > 255)
			bc = 255;
		int r = fc + random.nextInt(bc - fc);
		int g = fc + random.nextInt(bc - fc);
		int b = fc + random.nextInt(bc - fc);
		return new Color(r, g, b);
	}
}
